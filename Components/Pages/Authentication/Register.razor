@page "/register"
@using GiftOftheGivers.WebApp.Services
@using GiftOftheGivers.WebApp.Services.DTOs
@inject IUserService UserService
@inject NavigationManager NavigationManager

<div class="form-container">
    <div class="form-card">
        <h3 class="form-title">Create Your Account</h3>
        <p class="form-subtitle">Join our community of givers.</p>

        <EditForm Model="@_model" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="_model.FirstName" />
                <ValidationMessage For="@(() => _model.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="_model.LastName" />
                <ValidationMessage For="@(() => _model.LastName)" />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="_model.Email" />
                <ValidationMessage For="@(() => _model.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="_model.Password" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>

            <button type="submit" class="btn-submit" disabled="@_isProcessing">Register</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="snackbar error">@_errorMessage</div>
        }
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <div class="snackbar success">@_successMessage</div>
        }
    </div>
</div>

@code {
    private readonly UserRegistrationDto _model = new();
    private bool _isProcessing = false;
    private string? _errorMessage;
    private string? _successMessage;

    private async Task HandleRegistration()
    {
        _isProcessing = true;
        _errorMessage = null;
        _successMessage = null;

        var success = await UserService.RegisterUserAsync(_model);

        if (success)
        {
            _successMessage = "Registration successful! Redirecting to login...";
            await Task.Delay(2000); // Wait 2 seconds to show message
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            _errorMessage = "Registration failed. The email may already be in use.";
        }

        _isProcessing = false;
    }
}