@page "/Account/Login"
@layout AuthLayout

@attribute [IgnoreAntiforgeryToken]


@using System.ComponentModel.DataAnnotations
@using GiftOfTheGivers.WebApp.Components.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GiftOfTheGivers.WebApp.Models
@using Microsoft.AspNetCore.Mvc

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<StatusMessage Message="@errorMessage" />

    <div class="card-body">
        <h3 class="form-title">Log in</h3>
        <p class="form-subtitle">Welcome back! Login to continue.</p>

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <button type="submit" class="btn-submit">Log in</button>

            <div class="auth-links">
                <a href="Account/ForgotPassword">Forgot password?</a>
                <p>Don't have an account? <a href="Account/Register">Sign up here</a></p>
            </div>
        </EditForm>
    </div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        errorMessage = null;
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is null)
            {
                errorMessage = "Could not find user details after login.";
                return;
            }

            var roles = await UserManager.GetRolesAsync(user);
            var redirectPath = roles.FirstOrDefault()?.ToLower() switch
            {
                "admin" => "/analytics",
                "volunteer" => "/volunteers",
                "donor" => "/donations",
                _ => "/"
            };

            RedirectManager.RedirectTo(redirectPath);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}